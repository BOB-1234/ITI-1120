# ITI 1120
# Bla Bla Bla
# 1234567

# Assignment 3, Part 2

import random
import time


def perfect_input(a, b, question):
    '''
    Str-> Int, Int, Str
    Takes user input for integer. Attempts to reduce error within program.
    '''
    test=input(question)
    try:
        test=int(test)
    except ValueError:
        print("\nError! Not an integer.\n")
        return perfect_input(a, b, question)
    if (a<=test<=b):
        return int(test)
    else:
        print("\nError! Out of range!\n")
        return perfect_input(a, b, question)
    

def create_board(size):
    '''
    int->list (of str)
    Precondition: size is even positive integer between 2 and 52
    '''
    while size%2==1 or (2<=size<=52)==False:
        print("Incorrect input")
        size=integer_input("How many cards do you want to play with?\nEnter an even number between 2 and 52:\n>>>")  
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")

    board = [None]*size

    letter='A'
    for i in range(len(board)//2):
        board[i]=letter
        board[i+len(board)//2 ]=board[i]
        letter=chr(ord(letter)+1)
    random.shuffle(board)
    return board


def print_board(a):
    '''
    (list of str)->None
    Prints the current board in a nicely formated way
    '''
    for i in range(len(a)):
        print('{0:4}'.format(a[i].upper()), end=' ')
    print()
    for i in range(len(a)):
        print('{0:4}'.format(str(i+1)), end=' ')

        
        
def guess(a,b,board,discovered):
    '''
    int,int -> list
    This program takes two integers and returns a modified list,
    If the two integers are the positional arguments for two
    identical characters in a list.
    '''

    blurred_list=[]
    for x in range(len(board)):
        if x==(a-1) or x==(b-1):
            blurred_list.append(board[x])
        else:
            blurred_list.append("*")
        if discovered[x]==True:
            blurred_list[x]=board[x]
    print_board(blurred_list)

    if a == b:
        print("\nERROR: Same number input.")

    elif (board[a-1]==board[b-1]) and ((a*b)!=0):
        '''
        Requiring that A and B are not zero fixes a strange error where the last letter shows when A or B is 0. 
        '''
        discovered[(a-1)]=True
        discovered[(b-1)]=True


    wait_for_player()

def wait_for_player():
    '''
    (None)->None
    Pauses the program until the user presses enter
    '''
    try:
        input("\nPress enter to continue ")
    except SyntaxError:
        pass

def display_guess(g1, g2, game_board, board):
    guess_board = []
    for i in range(len(board)):
        if i == g1 or i == g2:
            guess_board.append(board[i])
        else:
            guess_board.append(game_board[i])

    print_board(guess_board)

    if guess_board[g1] == guess_board[g2]:
        game_board[g1] = guess_board[g1]
        game_board[g2] = guess_board[g2]
        

def play_game(board):
    '''
    (list of str)->None
    Play a simple board game. Main loop of the Memory Game. Prompts user for input, reads and updates the game board, and counts
    the number of guesses a player makes.
    '''
    
    game_board = ["*"] * len(board)
    guess_count = 0

    while "*" in game_board:
        print_board(game_board)
        print("\nEnter two distinct integers on the board that you want revealed.")
        print("i.e. two integers in the range [1, " + str(len(game_board))+"]")
        guess_1 = perfect_input(1,len(board),"First number: ") - 1
        guess_2 = perfect_input(1,len(board),"Second number: ") - 1
        
        

        if guess_1 == guess_2:
            continue

        guess_count += 1

        display_guess(guess_1, guess_2, game_board, board)

        wait_for_player()

        '''
        Clears the page by moving the cursor to the bottom of the screen.
        '''
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")

    min_guess_size = len(board)//2
    if guess_count == min_guess_size:
        print_board(board)
        print("\nCongratulations! You completed the game with " + str(guess_count) + " guesses!" + "\nThat is " + str(guess_count-min_guess_size) + " more than possible.")
    else:
        print_board(board)
        print("\nCould have been better.\nYour results is " + str(guess_count-min_guess_size) + " more guesses than optimal amount.")

    wait_for_player()
    print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    
        
while True:
    try:
        print("How many cards do you want to play with? ")
        size = perfect_input(2, 52, "Enter an even number between 2 and 52: ")
        
        if size%2 == 0:
            board = create_board(size)
            play_game(board)
        else:
            raise ValueError
    except ValueError:
        print("\nPlease enter a valid number.\n")
